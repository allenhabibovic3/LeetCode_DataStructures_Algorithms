public class NQueens {
	//utility function to return the bigger of two ints
	
	public static int max(int a, int b) {
		return (a>b) ? a : b;
	}
	
	public static void longestCommonSubString(String X, String Y) {
		//dynamic programming technique
		//create the dp matrix and the lcs will be at the bottom right most cell
		
		int m = X.length(), n = Y.length();
		int[][] L = new int[m + 1][n + 1];
		//add 1 row and col to table for 0 entries
		
		for(int i = 0; i <= m; i++) {
			for(int j = 0; j <= n; j++) {
				if(i == 0 || j == 0)
					L[i][j] = 0;
				else if(X.charAt(i-1) == Y.charAt(j-1))
					L[i][j] = 1 + L[i-1][j-1]; //characters match so add 1 to the upper left diagonal
				else 
					L[i][j] = max(L[i-1][j], L[i][j-1]); //otherwise chose the greater of element above or element to the left
			}
		}
		
		//construction of the actual string by backtracking to see where characters matched, go in that direction towards L[0][0]
		
		int index = L[m][n]; // answer
		int temp = index;
		
		char[] lcs_str = new char[index+1];
		lcs_str[index] = '\u0000';
		
		int i = m, j = n;
		
		while(i > 0 && j > 0) {
			if(X.charAt(i-1) == Y.charAt(j-1)) {
				lcs_str[index-1] = X.charAt(i-1);
				i--;
				j--;
				index--;
			}else if(L[i-1][j] > L[i][j-1])
				i--;
			else
				j--;
		}
		
		String result = new String(lcs_str);
		
		System.out.println("The LCS is: " + result + " and has a length of " + result.length());
	}
	
	public static void main(String[] args) {
		
		String x = "AGCCTTATCG";
		String y = "XAYGCCXTXACG";
		
		longestCommonSubString(x, y);
		
	}
}
